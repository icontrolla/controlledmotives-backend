# Generated by Django 5.2 on 2025-05-08 06:23

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='abstract_artworks/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ArtCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ArtType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DrawingArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='drawing_artworks/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('wallet_address', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Moment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='aesthetic_moments/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Painting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='paintings/')),
                ('premiere_end_date', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SecureFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('encrypted_content', models.BinaryField()),
            ],
        ),
        migrations.CreateModel(
            name='StaticFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration_days', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('features', models.TextField(default='No features specified')),
                ('stripe_price_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ThriftStoreItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(upload_to='thrift_store_items/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AbstractArt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='abstractarts/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('style', models.CharField(choices=[('geometric', 'Geometric'), ('lyrical', 'Lyrical'), ('minimalist', 'Minimalist'), ('cubism', 'Cubism'), ('surreal', 'Surreal'), ('expressionist', 'Expressionist'), ('other', 'Other')], default='other', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abstractarts_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abstractarts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Abstract Art',
                'verbose_name_plural': 'Abstract Arts',
            },
        ),
        migrations.CreateModel(
            name='AestheticMoment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, null=True, upload_to='posts/videos/')),
                ('caption', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blockchain_address', models.CharField(blank=True, help_text='Blockchain wallet address for this moment', max_length=42)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID for NFT minting', max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ArtGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='art_galleries/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('flowers', models.IntegerField(default=0)),
                ('is_tokenized', models.BooleanField(default=False)),
                ('blockchain_txn_hash', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('blockchain_address', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain_network', models.CharField(choices=[('Ethereum', 'Ethereum'), ('Polygon', 'Polygon'), ('Solana', 'Solana'), ('Tezos', 'Tezos')], default='Ethereum', max_length=50)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('txn_hash', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('users_who_flowered', models.ManyToManyField(blank=True, related_name='flowered', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Appreciations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.artgallery')),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(upload_to='artist_profiles/')),
                ('category', models.CharField(choices=[('major', 'Major'), ('upcoming', 'Upcoming'), ('trending', 'Trending')], max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_major', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('blockchain_address', models.CharField(blank=True, help_text="Artist's blockchain wallet address", max_length=42)),
                ('medium', models.CharField(choices=[('painting', 'Painting'), ('photography', 'Photography'), ('drawing', 'Drawing'), ('mixed', 'Mixed Media')], default='painting', help_text="Artist's primary medium for icon display", max_length=50)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ArtSubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='profiles.artcategory')),
            ],
        ),
        migrations.CreateModel(
            name='ArtworkGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('flowers', models.ManyToManyField(blank=True, related_name='flowered_artworks', to=settings.AUTH_USER_MODEL)),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.gallery')),
            ],
        ),
        migrations.CreateModel(
            name='BlockchainWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, unique=True)),
                ('private_key', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('encrypted_private_key', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConceptualMixedMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='conceptual_mixed_media/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='cinematography_thumbnails/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('style', models.CharField(choices=[('conceptual', 'Conceptual Art'), ('mixed_media', 'Mixed Media'), ('installation', 'Installation Art'), ('performance', 'Performance Art'), ('other', 'Other')], default='other', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.artist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conceptual_mixed_media', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conceptual & Mixed Media',
                'verbose_name_plural': 'Conceptual & Mixed Media',
                'db_table': 'profiles_conceptualmixedmedia',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('is_artist', models.BooleanField(default=False)),
                ('total_flowers', models.PositiveIntegerField(default=0)),
                ('is_major', models.BooleanField(default=False)),
                ('wallet_address', models.CharField(blank=True, help_text="User's blockchain wallet address", max_length=255, null=True)),
                ('blockchain_type', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('bitcoin', 'Bitcoin')], help_text='Type of blockchain the user is associated with', max_length=50, null=True)),
                ('subscription_plan', models.CharField(choices=[('free', 'Free'), ('basic', 'Basic'), ('premium', 'Premium')], default='free', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DrawingArt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='artworks/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('art_type', models.CharField(choices=[('design_illustration', 'Design & Illustration'), ('editorial_book_illustration', 'Editorial & Book Illustration'), ('concept_art_character_design', 'Concept Art & Character Design'), ('typography_graphic_design', 'Typography & Graphic Design'), ('motion_design_animation', 'Motion Design & Animation')], default='design_illustration', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artworks_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artworks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Drawing Artwork',
                'verbose_name_plural': 'Drawing Artworks',
            },
        ),
        migrations.CreateModel(
            name='EthereumTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_address', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('txn_hash', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FashionArt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='fashionarts/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.CharField(choices=[('avant_garde', 'Avant-Garde & Experimental Fashion'), ('textile_fabric', 'Textile & Fabric Art'), ('digital_3d_printed', 'Digital & 3D-Printed Fashion'), ('accessories_jewelry', 'Accessories & Jewelry Design')], default='avant_garde', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fashionart_as_artist', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fashionart_as_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Virtual & Interactive Art',
                'verbose_name_plural': 'Virtual & Interactive Arts',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_helpful', models.PositiveIntegerField(default=0)),
                ('is_visible', models.BooleanField(default=True)),
                ('source', models.CharField(choices=[('website', 'Website'), ('mobile', 'Mobile')], default='website', max_length=50)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('helpful', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FineArt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='finearts/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('style', models.CharField(choices=[('realism', 'Realism'), ('abstract', 'Abstract'), ('impressionism', 'Impressionism'), ('surrealism', 'Surrealism'), ('expressionism', 'Expressionism'), ('minimalism', 'Minimalism'), ('other', 'Other')], default='other', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finearts_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finearts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fine Art',
                'verbose_name_plural': 'Fine Arts',
            },
        ),
        migrations.CreateModel(
            name='Flower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('given_by', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flowers', to='profiles.artist')),
            ],
        ),
        migrations.CreateModel(
            name='FloweredArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flowered_at', models.DateTimeField(auto_now_add=True)),
                ('related_artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_flowered_set', to='profiles.artworkgallery')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flowered_by_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FlowerGiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_given', models.BooleanField(default=False)),
                ('flowers_given', models.PositiveIntegerField(default=0)),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.artworkgallery')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Exhibition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(max_length=255)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.gallery')),
            ],
        ),
        migrations.CreateModel(
            name='CinematographyGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.gallery')),
            ],
        ),
        migrations.CreateModel(
            name='NFTTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=50)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.artworkgallery')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bought_nfts', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sold_nfts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PhotographyContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('fine-art', 'Fine Art Photography'), ('cinematic', 'Cinematic Photography'), ('experimental', 'Experimental Photography'), ('video', 'Short Films & Video Art')], max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the photography or video', null=True)),
                ('image', models.ImageField(blank=True, help_text='Main image or video thumbnail', null=True, upload_to='photography/')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price if for sale', max_digits=10, null=True)),
                ('is_for_sale', models.BooleanField(default=False, help_text='Is this item available for purchase?')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Number of likes or upvotes')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured on the homepage?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_nft', models.BooleanField(default=False, help_text='Is this an NFT?')),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('tezos', 'Tezos')], default='ethereum', max_length=20)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('artist', models.ForeignKey(help_text='The artist who created this work', on_delete=django.db.models.deletion.CASCADE, related_name='photography_content_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user who uploaded this content', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photography_content', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Photography Content',
                'verbose_name_plural': 'Photography Content',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('caption', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('blockchain_address', models.CharField(blank=True, help_text='Blockchain wallet address for this post', max_length=42)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID for NFT minting', max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='profiles.post')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='profiles.post')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('total_flowers', models.PositiveIntegerField(default=0)),
                ('is_major', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('subscription_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('stripe_checkout_session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True)),
                ('plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VirtualInteractiveArt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='virtualinteractivearts/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('art_type', models.CharField(choices=[('vr_art', 'Virtual Reality (VR) Art'), ('ar_art', 'Augmented Reality (AR) Art'), ('projection_mapping', 'Projection Mapping & Light Installations'), ('ai_driven', 'AI-Driven Sound & Visuals')], default='vr_art', max_length=50)),
                ('is_for_sale', models.BooleanField(default=False)),
                ('flowers', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_nft', models.BooleanField(default=False)),
                ('nft_contract_address', models.CharField(blank=True, max_length=255, null=True)),
                ('nft_token_id', models.CharField(blank=True, max_length=255, null=True)),
                ('blockchain', models.CharField(blank=True, choices=[('ethereum', 'Ethereum'), ('polygon', 'Polygon'), ('solana', 'Solana'), ('other', 'Other')], max_length=100, null=True)),
                ('mint_date', models.DateTimeField(blank=True, null=True)),
                ('nft_url', models.URLField(blank=True, null=True)),
                ('nft_metadata', models.JSONField(blank=True, help_text='Metadata of the NFT', null=True)),
                ('copyright_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtualinteractiveart', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtualinteractivearts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
